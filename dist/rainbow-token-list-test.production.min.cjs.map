{"version":3,"file":"rainbow-token-list-test.production.min.cjs","sources":["../src/constants.ts","../src/load.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const PRODUCTION = process.env.NODE_ENV === 'production';\n\nexport const CONTRACT_MAP_REPO = 'metamask/eth-contract-metadata';\n\nexport const ETHEREUM_LISTS_REPO = 'ethereum-lists/tokens/tokens/eth';\n\n//\n// Related to Token List and Token Overrides.\n//\nexport const REMOTE_TOKEN_LIST_ENDPOINT =\n  'https://raw.githubusercontent.com/ctjlewis/rainbow-token-list/service-compatibility/src/data/rainbow-token-list.json';\n\nexport const REMOTE_TOKEN_OVERRIDES_ENDPOINT =\n  'https://raw.githubusercontent.com/ctjlewis/rainbow-overrides/master/src/data/rainbow-overrides.json';\n\nexport const TokenListItemSchema = z.string().url().nonempty();\n\nexport type TokenListItem = z.infer<typeof TokenListItemSchema>;\nexport const TokenListTypeSchema = z.record(TokenListItemSchema);\nexport type TokenListType = z.infer<typeof TokenListTypeSchema>;\n\nexport const TOKEN_LISTS: TokenListType = {\n  aave: 'https://tokenlist.aave.eth.link',\n  coingecko: 'https://tokens.coingecko.com/uniswap/all.json',\n  dharma: 'https://tokenlist.dharma.eth.link',\n  kleros: 'http://t2crtokens.eth.link',\n  roll: 'https://app.tryroll.com/tokens.json',\n  synthetix: 'https://synths.snx.eth.link',\n  wrapped: 'http://wrapped.tokensoft.eth.link',\n};\n\nexport const TokenListEnumSchema = z.enum([\n  'aave',\n  'coingecko',\n  'dharma',\n  'kleros',\n  'roll',\n  'synthetix',\n  'wrapped',\n]);\nexport type TokenListEnum = z.infer<typeof TokenListEnumSchema>;\n\nexport const SocialSchema = z.object({\n  blog: z.string().optional(),\n  chat: z.string().optional(),\n  discord: z.string().optional(),\n  facebook: z.string().optional(),\n  forum: z.string().optional(),\n  github: z.string().optional(),\n  gitter: z.string().optional(),\n  instagram: z.string().optional(),\n  linkedin: z.string().optional(),\n  medium: z.string().optional(),\n  reddit: z.string().optional(),\n  slack: z.string().optional(),\n  telegram: z.string().optional(),\n  twitter: z.string().optional(),\n  youtube: z.string().optional(),\n});\n\nexport const TokenDeprecationSchema = z.object({\n  new_address: z.string().optional(),\n});\n\nexport const TokenExtensionsSchema = z.object({\n  color: z.string().optional(),\n  isRainbowCurated: z.boolean().optional(),\n  isVerified: z.boolean().optional(),\n  shadowColor: z.string().optional(),\n});\nexport type TokenExtensionsType = z.infer<typeof TokenExtensionsSchema>;\n\nexport const TokenSchema = z.object({\n  address: z.string().regex(/^0x[a-fA-F0-9]{40}$/),\n  chainId: z.number().optional(),\n  decimals: z.number().min(0),\n  deprecation: TokenDeprecationSchema.optional(),\n  extensions: TokenExtensionsSchema.optional(),\n  name: z.string(),\n  social: SocialSchema.optional(),\n  symbol: z.string(),\n  website: z.string().optional(),\n});\n\n/**\n * Raw token data that is loaded from the JSON files.\n */\nexport const RawContractMapTokenSchema = z.object({\n  address: z.string(),\n  decimals: z.union([z.string(), z.number()]),\n  name: z.string(),\n  symbol: z.string(),\n});\n\n/**\n * Raw token data that is loaded from the JSON files.\n */\nexport const RawEthereumListsTokenSchema = z.object({\n  address: z.string().optional(),\n  decimals: z.union([z.string(), z.number()]).optional(),\n  deprecation: TokenDeprecationSchema.optional(),\n  name: z.string().optional(),\n  social: SocialSchema.optional(),\n  symbol: z.string().optional(),\n  website: z.string().optional(),\n});\n\nexport type RawContractMapToken = z.infer<typeof RawContractMapTokenSchema>;\nexport type RawEthereumListsToken = z.infer<typeof RawEthereumListsTokenSchema>;\nexport type Token = z.infer<typeof TokenSchema>;\nexport type TokenSocialMetadata = z.infer<typeof SocialSchema>;\n","import { map, toLower } from 'lodash';\n\nimport OFFLINE_TOKEN_METADATA from './data/rainbow-token-list.json';\nimport { OFFLINE_TOKEN_OVERRIDES } from 'rainbow-overrides';\n\nimport {\n  REMOTE_TOKEN_LIST_ENDPOINT,\n  REMOTE_TOKEN_OVERRIDES_ENDPOINT,\n} from './constants';\nimport fetch from 'node-fetch';\n\ntype TokenMetadata = typeof OFFLINE_TOKEN_METADATA;\n\n/**\n * Get the raw Token List data.\n *\n * @param endpoint The endpoint from which to load the Token List.\n * @param offlineData The data to fallback to in case of network failure.\n * @returns The Token List dataset.\n */\nexport const loadFromEndpoint = async <T>(endpoint: string, offlineData: T) => {\n  console.log('Making request to', endpoint);\n  try {\n    const result = await fetch(endpoint);\n    console.log('REQUEST SUCCEEDED.');\n    return await result.json();\n  } catch (e) {\n    console.log('REQUEST FAILED.', e);\n    return offlineData;\n  }\n};\n\n/**\n * Load the full Token List, including any manual tokens.\n *\n * @param offlineData The data to fallback to in case of network failure.\n * @returns The full Token List.\n */\nexport const loadTokenList = async () => {\n  const tokenData = await loadFromEndpoint(\n    REMOTE_TOKEN_LIST_ENDPOINT,\n    OFFLINE_TOKEN_METADATA\n  );\n\n  const tokens = await tokenListFromData(tokenData);\n  return tokens;\n};\n\n/**\n * Load the Token Overrides List.\n * @returns All token overrides.\n */\nexport const loadTokenOverrides = async (): Promise<any> => {\n  const overrides = loadFromEndpoint(\n    REMOTE_TOKEN_OVERRIDES_ENDPOINT,\n    OFFLINE_TOKEN_OVERRIDES\n  );\n\n  return overrides;\n};\n\n/**\n * Get the Token List from raw metadata.\n *\n * @param tokenData The raw Token List data to process.\n * @returns The Token List.\n */\nexport const tokenListFromData = async (tokenData: TokenMetadata) => {\n  const loadedTokens = map(tokenData.tokens, (token) => {\n    const { address: rawAddress, decimals, name, symbol, extensions } = token;\n    const address = toLower(rawAddress);\n\n    return {\n      address,\n      decimals,\n      name,\n      symbol,\n      uniqueId: address,\n      ...extensions,\n    };\n  });\n\n  return loadedTokens;\n};\n","#!/usr/bin/env node\n\n/**\n * Disable certificate validation.\n *\n * @see https://nodejs.org/api/cli.html#cli_node_tls_reject_unauthorized_value\n */\n/**\n * Library imports and exports.\n */\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\nexport * from './load';\n"],"names":["process","TokenListItemSchema","z","string","url","nonempty","record","enum","SocialSchema","object","blog","optional","chat","discord","facebook","forum","github","gitter","instagram","linkedin","medium","reddit","slack","telegram","twitter","youtube","TokenDeprecationSchema","new_address","TokenExtensionsSchema","color","isRainbowCurated","boolean","isVerified","shadowColor","address","regex","chainId","number","decimals","min","deprecation","extensions","name","social","symbol","website","union","loadFromEndpoint","async","endpoint","offlineData","console","log","result","fetch","json","e","tokenListFromData","tokenData","map","tokens","token","rawAddress","toLower","uniqueId","env","NODE_TLS_REJECT_UNAUTHORIZED","OFFLINE_TOKEN_METADATA","OFFLINE_TOKEN_OVERRIDES"],"mappings":"4i4rBAE0BA,QASnB,MAMMC,EAAsBC,IAAEC,SAASC,MAAMC,WAGjBH,IAAEI,OAAOL,GAaTC,IAAEK,KAAK,CACxC,OACA,YACA,SACA,SACA,OACA,YACA,YAIK,MAAMC,EAAeN,IAAEO,OAAO,CACnCC,KAAMR,IAAEC,SAASQ,WACjBC,KAAMV,IAAEC,SAASQ,WACjBE,QAASX,IAAEC,SAASQ,WACpBG,SAAUZ,IAAEC,SAASQ,WACrBI,MAAOb,IAAEC,SAASQ,WAClBK,OAAQd,IAAEC,SAASQ,WACnBM,OAAQf,IAAEC,SAASQ,WACnBO,UAAWhB,IAAEC,SAASQ,WACtBQ,SAAUjB,IAAEC,SAASQ,WACrBS,OAAQlB,IAAEC,SAASQ,WACnBU,OAAQnB,IAAEC,SAASQ,WACnBW,MAAOpB,IAAEC,SAASQ,WAClBY,SAAUrB,IAAEC,SAASQ,WACrBa,QAAStB,IAAEC,SAASQ,WACpBc,QAASvB,IAAEC,SAASQ,aAGTe,EAAyBxB,IAAEO,OAAO,CAC7CkB,YAAazB,IAAEC,SAASQ,aAGbiB,EAAwB1B,IAAEO,OAAO,CAC5CoB,MAAO3B,IAAEC,SAASQ,WAClBmB,iBAAkB5B,IAAE6B,UAAUpB,WAC9BqB,WAAY9B,IAAE6B,UAAUpB,WACxBsB,YAAa/B,IAAEC,SAASQ,aAICT,IAAEO,OAAO,CAClCyB,QAAShC,IAAEC,SAASgC,MAAM,uBAC1BC,QAASlC,IAAEmC,SAAS1B,WACpB2B,SAAUpC,IAAEmC,SAASE,IAAI,GACzBC,YAAad,EAAuBf,WACpC8B,WAAYb,EAAsBjB,WAClC+B,KAAMxC,IAAEC,SACRwC,OAAQnC,EAAaG,WACrBiC,OAAQ1C,IAAEC,SACV0C,QAAS3C,IAAEC,SAASQ,aAMmBT,IAAEO,OAAO,CAChDyB,QAAShC,IAAEC,SACXmC,SAAUpC,IAAE4C,MAAM,CAAC5C,IAAEC,SAAUD,IAAEmC,WACjCK,KAAMxC,IAAEC,SACRyC,OAAQ1C,IAAEC,WAM+BD,IAAEO,OAAO,CAClDyB,QAAShC,IAAEC,SAASQ,WACpB2B,SAAUpC,IAAE4C,MAAM,CAAC5C,IAAEC,SAAUD,IAAEmC,WAAW1B,WAC5C6B,YAAad,EAAuBf,WACpC+B,KAAMxC,IAAEC,SAASQ,WACjBgC,OAAQnC,EAAaG,WACrBiC,OAAQ1C,IAAEC,SAASQ,WACnBkC,QAAS3C,IAAEC,SAASQ,mBCtFToC,EAAmBC,MAAUC,EAAkBC,KAC1DC,QAAQC,IAAI,oBAAqBH,GACjC,IACE,MAAMI,QAAeC,UAAML,GAE3B,OADAE,QAAQC,IAAI,4BACCC,EAAOE,OACpB,MAAOC,GAEP,OADAL,QAAQC,IAAI,kBAAmBI,GACxBN,IAuCEO,EAAoBT,MAAOU,GACjBC,MAAID,EAAUE,QAASC,IAC1C,MAAQ3B,QAAS4B,EAAUxB,SAAEA,EAAQI,KAAEA,EAAIE,OAAEA,EAAMH,WAAEA,GAAeoB,EAC9D3B,EAAU6B,UAAQD,GAExB,MAAO,CACL5B,QAAAA,EACAI,SAAAA,EACAI,KAAAA,EACAE,OAAAA,EACAoB,SAAU9B,KACPO,MCpETzC,QAAQiE,IAAIC,6BAA+B,qDD4BdlB,UAC3B,MAAMU,QAAkBX,ED3BxB,uHC6BEoB,GAIF,aADqBV,EAAkBC,+BAQPV,SACdD,EDtClB,sGCwCEqB"}